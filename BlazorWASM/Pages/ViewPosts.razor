@page "/ViewPosts"
@using global::Shared.Models
@using HttpClients.ClientInterfaces
@inject IPostService postService
@inject NavigationManager navMgr
<h3>Posts</h3>
@if (posts == null)
{
}
else if (!posts.Any())
{
    <p>No Posts to display</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Post ID</th>
            <th>Owner</th>
            <th>Title</th>
            <th>Edit</th>
            <th>Delete?</th>
            <th>Read more</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in posts)
        {
            <tr>
                <td>@item.idPost</td>
                <td>@item.creator.userName</td>
                <td>@item.title</td>
                <td>
                    <img src="icons/edit.gif" class="funnel" @onclick="@(() => navMgr.NavigateTo($"/EditPost/{item.idPost}"))"/>
                </td>
                <td>
                    <label @onclick="@(() => RemoveTodo(item.idPost))" style="cursor:pointer; color: red; font-weight: bold">
                        &#x2717;
                    </label>
                </td>
                <td>
                    <label @onclick="@(() => navMgr.NavigateTo($"/DetailsPost/{item.idPost}"))" style="cursor:pointer; color: blue; font-weight: bold">
                                            &#x2717;
                    </label>
                </td>
            </tr>
        }
        </tbody>
    </table>
}
@if (!string.IsNullOrEmpty(msg))
{
    <label style="color: red">@msg</label>
}

@code {
    private IEnumerable<Post>? posts;
    private string msg = "";
    private int zero = 0;
    
    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            posts = await postService.GetPosts(zero);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task RemoveTodo(int idPost)
    {
        msg = "";
        try
        {
            await postService.Delete(idPost);
            
            var list = new List<Post>(posts!);
            list.RemoveAll(todo => todo.idPost == idPost);
            posts = list.AsEnumerable();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
}